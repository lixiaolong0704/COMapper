{"name":"Comapper","tagline":"Devpress and Winform  bind Framwork","body":" <h1># COMapper</h1>\r\n    <span>WINFORM和DEVEXPRESS控件和实体对象绑定框架 .net 4.0</span>\r\n\r\n    在.net WPF中使用了MVVM模式， 并且使用各种数据绑定。\r\n\r\n    在.net WINForm 中传统的方式是使用赋值的方法：\r\n\r\n    <pre class=\"prettyprint lang-cs\">this.No.Text = item[\"Xno\"] == null ? \"\" : item[\"Xno\"].ToString();//商品序号\r\n    this.GoodsEnrolNo.Text = item[\"GoodsEnrolNo\"] == null ? \"\" : item[\"GoodsEnrolNo\"].ToString();//备案序号\r\n    this.GoodsMaterialNo.Text = item[\"MaterialNo\"] == null ? \"\" : item[\"MaterialNo\"].ToString();//备案料号\r\n    this.OriginCode.Text = item[\"OriginCode\"] == null ? \"\" : item[\"OriginCode\"].ToString();//原产地\r\n    this.DutyMode.Text = item[\"DutyMode\"] == null ? \"\" : item[\"DutyMode\"].ToString();//征免\r\n    this.HsCode.Text = item[\"HsCode\"] == null ? \"\" : item[\"HsCode\"].ToString();//商品序号\r\n    this.GoodsName.Text = item[\"GoodsName\"] == null ? \"\" : item[\"GoodsName\"].ToString();//商品名称\r\n    this.Use.Text = item[\"UseCode\"] == null ? \"\" : item[\"UseCode\"].ToString();//用途\r\n    this.Model.Text = item[\"Model\"] == null ? \"\" : item[\"Model\"].ToString();//规格\r\n    this.QuantityUnit.Text = item[\"QuantityUnit\"] == null ? \"\" : item[\"QuantityUnit\"].ToString().PadLeft(3, '0');//成交单位\r\n    this.FirstUnit.Text = item[\"FirstUnit\"] == null ? \"\" : item[\"FirstUnit\"].ToString().PadLeft(3, '0');//法定单位\r\n    this.SecondUnit.Text = item[\"SecondUnit\"] == null ? \"\" : item[\"SecondUnit\"].ToString();//第二单位\r\n    this.Currency.Text = item[\"Currency\"] == null ? \"\" : item[\"Currency\"].ToString();//币值\r\n    this.GoodsVersion.Text = item[\"GoodsVersion\"] == null ? \"\" : item[\"GoodsVersion\"].ToString();//版本号\r\n    this.Note.Text = item[\"Note\"] == null ? \"\" : item[\"Note\"].ToString();//备注 \r\n    this.GoodNature.Text = item[\"GoodsNature\"] == null ? \"\" : item[\"GoodsNature\"].ToString();//材料性质 \r\n    ID = Convert.ToInt32(item[\"ID\"]);\r\n</pre>\r\n    \r\n    <p>\r\n        写了大量重复的代码。\r\n\r\n\r\n        当然中也有数据绑定的功能 .bindings.add(...) 但是在使用的时候比较麻烦，个人感觉有点功能不完全。\r\n        所以我开发了COMapper\r\n        DEVEXPRESS支持\r\n    </p>\r\n    <p>\r\n        <pre class=\"prettyprint lang-cs\">\r\n         COGlobal.RegisterConfigPath(\"EMSinfoHeader\", @\"COMapper\\Configs\\template.xml\");\r\n        COGlobal.RegisterConfigPath(\"emsdetail\", @\"COMapper\\Configs\\emsdetail.xml\");\r\n        COGlobal.Supports = new List&lt;basesupport&gt;\r\n            ()\r\n            {\r\n            //new SupCustomGridLookUpEdit(),\r\n            new SupLookUpEdit(),\r\n            new SupTextEdit(new TestConverter())\r\n            };\r\n        </pre>\r\n    </p>\r\n   \r\n    <p>\r\n        2.绑定====================================================\r\n        同过 配置文件将 Panel中的控件值自动赋值给对象，按照控件Name和对象名字自动对应\r\n\r\n        DevExpressCOMapper.SetControlByProperties(this.PanelMN, item, COGlobal.GetConfig(\"emsdetail\"));\r\n    </p>\r\n    <p>\r\n        3.绑定====================================================\r\n        当进行保存操作时候，自动反射回来\r\n        DevExpressCOMapper.SetPropertiesByControl(this.PanelMN, MaterialNumbercurrentItem, COGlobal.GetConfig(\"emsdetail\"));\r\n    </p>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}